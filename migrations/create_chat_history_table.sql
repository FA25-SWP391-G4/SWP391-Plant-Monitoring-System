-- Migration: Create chat_history table for AI chatbot conversations
-- This migration creates the chat_history table to store AI chatbot conversations
-- with support for conversation context, plant-specific context, and OpenRouter integration

-- Create chat_history table
CREATE TABLE IF NOT EXISTS chat_history (
    chat_id SERIAL PRIMARY KEY,
    user_id INTEGER NOT NULL REFERENCES users(user_id) ON DELETE CASCADE,
    plant_id INTEGER REFERENCES plants(plant_id) ON DELETE SET NULL,
    conversation_id UUID DEFAULT gen_random_uuid(),
    message TEXT NOT NULL,
    response TEXT NOT NULL,
    context JSONB DEFAULT '{}',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    -- No inline indexes in PostgreSQL - will create separately
);

-- Add comments for documentation
COMMENT ON TABLE chat_history IS 'Stores AI chatbot conversation history with plant context';
COMMENT ON COLUMN chat_history.chat_id IS 'Primary key for chat history entries';
COMMENT ON COLUMN chat_history.user_id IS 'Foreign key to users table';
COMMENT ON COLUMN chat_history.plant_id IS 'Optional foreign key to plants table for plant-specific conversations';
COMMENT ON COLUMN chat_history.conversation_id IS 'UUID to group related messages in a conversation';
COMMENT ON COLUMN chat_history.message IS 'User message/query sent to the AI chatbot';
COMMENT ON COLUMN chat_history.response IS 'AI chatbot response generated by OpenRouter/Mistral';
COMMENT ON COLUMN chat_history.context IS 'JSON context including plant data, sensor readings, and metadata';
COMMENT ON COLUMN chat_history.created_at IS 'Timestamp when the conversation entry was created';

-- Create function to generate conversation UUID if not provided
CREATE OR REPLACE FUNCTION generate_conversation_id()
RETURNS UUID AS $$
BEGIN
    RETURN gen_random_uuid();
END;
$$ LANGUAGE plpgsql;

-- Create trigger to auto-generate conversation_id if not provided
CREATE OR REPLACE FUNCTION set_conversation_id()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.conversation_id IS NULL THEN
        NEW.conversation_id := generate_conversation_id();
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_set_conversation_id
    BEFORE INSERT ON chat_history
    FOR EACH ROW
    EXECUTE FUNCTION set_conversation_id();

-- Create indexes for better query performance
CREATE INDEX IF NOT EXISTS idx_chat_history_user_id ON chat_history (user_id);
CREATE INDEX IF NOT EXISTS idx_chat_history_conversation_id ON chat_history (conversation_id);
CREATE INDEX IF NOT EXISTS idx_chat_history_plant_id ON chat_history (plant_id);
CREATE INDEX IF NOT EXISTS idx_chat_history_created_at ON chat_history (created_at);

-- Grant permissions (adjust as needed for your user roles)
-- GRANT SELECT, INSERT, UPDATE, DELETE ON chat_history TO plant_monitoring_user;
-- GRANT USAGE, SELECT ON SEQUENCE chat_history_chat_id_seq TO plant_monitoring_user;

-- Insert sample data for testing (optional - remove in production)
-- INSERT INTO chat_history (user_id, message, response, context) VALUES 
-- (1, 'How often should I water my tomato plant?', 'Tomato plants typically need water when the top inch of soil feels dry. This usually means watering every 2-3 days, but it depends on temperature, humidity, and pot size.', '{"plant_type": "tomato", "test_data": true}');